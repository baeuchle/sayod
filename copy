#!/usr/bin/python3

"""Copy stuff"""

import argparse
import datetime
from contextlib import ExitStack
from pathlib import Path

from config import Config
import log
from notify import Notify, oneline
from rsync import RSync
from provider import ProviderFactory, ProvideError
import remotereader

clog = log.get_logger('copy')

def handle_deadtime(force, config, notify):
    deadtime = int(config.find('rsync', 'deadtime', 0))
    if deadtime <= 0:
        clog.debug("No deadtime given, going ahead")
        return
    last_success = remotereader.remote(config, notify, 'SUCCESS', remotereader.LAST)
    tage = (datetime.datetime.today() - last_success).days
    if tage > deadtime:
        clog.info("Deadtime is over")
        return
    if not force:
        notify.deadtime(f"Letztes erfolgreiches Backup war vor weniger als {deadtime} Tagen")
        raise SystemExit(0)
    clog.info("Deadtime ignored because --force was specified")

def find_sources(config, notify):
    source = config.find('source', 'path', None)
    if source:
        return [source]
    source_list = config.find('source', 'list', None)
    if not source_list:
        notify.fatal('Kann Quellpfad nicht bestimmen (sollte in source::path oder source::list stehen)')
        clog.critical('source::path or source::list should be present')
        raise SystemExit(127)
    try:
        sls = config.find_section(source_list)
    except KeyError as ke:
        notify.fatal(f'Kann Quellenliste nicht finden ({source_list}::*)')
        clog.critical('[%s] should be present in configuration', source_list)
        raise SystemExit(127) from ke
    return [path for path in sls.values()]

parser = argparse.ArgumentParser(
    description="""Creates Backups and notifies about the success of failure thereof."""
)
parser.add_argument('--force', '-f', default=False, action='store_true', required=False)
Config.add_options(parser)
log.add_options(parser)
Notify.add_options(parser)
args = parser.parse_args()

clog = log.get_logger('copy', args)
config = Config.get_config(args)
notify = Notify(config, show=args.notification_show)

handle_deadtime(args.force, config, notify)
notify.start("Starte Backup")
sources = find_sources(config, notify)
target = config.find('target', 'path', None)
if not target:
    notify.fatal('Kann Zielpfad nicht bestimmen (sollte in target::path stehen')
    raise SystemExit(127)
exclude_file = config.find('source', 'exclude_file', None)
clog.info("Sources %s", '; '.join(sources))
clog.info("Target %s", target)
clog.info("Exclude file %s", exclude_file)

rsync = RSync()
rsync.fill_options(
        options=config.find('rsync', 'options', '').split()
      , exclude_file=exclude_file
      , no_cross=config.find('rsync', 'no_cross', '')
    )
rsync.sudo(config.find('rsync', 'privilege', ''))

providers = config.find('rsync', 'providers', '').split()
with ExitStack() as es:
    for prv in providers:
        try:
            es.enter_context(ProviderFactory(prv, config))
        except ProvideError as pe:
            clog.info("ProvideError: %s", pe)
            raise SystemExit(1) from pe
    rsync.run(sources=sources, target=target)

clog.info("RSYNC done, exit code %d, %d log lines, %d error lines",
          rsync.returncode, rsync.out_len, rsync.err_len)
rsync.save_output(config)
rsync.notify_result(notify)
rsync.report_output()
rsync.notify_result(notify)
