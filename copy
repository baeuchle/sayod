#!/usr/bin/python3

"""Copy stuff"""

import argparse
import datetime
from contextlib import ExitStack
from pathlib import Path
import subprocess
import sys

from config import Config
import log
from notify import Notify, oneline
from provider import ProviderFactory, ProvideError
import remotereader

clog = log.get_logger('copy')

parser = argparse.ArgumentParser(
    description="""Creates Backups and notifies about the success of failure thereof."""
)
parser.add_argument('--force', '-f', default=False, action='store_true', required=False)
Config.add_options(parser)
log.add_options(parser)
Notify.add_options(parser)
args = parser.parse_args()

clog = log.get_logger('copy', args)
config = Config.get_config(args)
notify = Notify(config, show=not args.notification_dontshow)

deadtime = int(config.find('rsync', 'deadtime', 0))
if deadtime > 0:
    last_success = remotereader.remote(config, notify, 'SUCCESS', remotereader.LAST)
    tage = (datetime.datetime.today() - last_success).days
    if tage <= deadtime:
        if not args.force:
            notify.deadtime(f"Letztes erfolgreiches Backup war vor weniger als {deadtime} Tagen")
            sys.exit(0)
        clog.info("Deadtime ignored because --force was specified")
    else:
        clog.info("Deadtime is over")
else:
    clog.info("No deadtime given")

notify.start("Starte Backup")

source = config.find('source', 'path', None)
sources = [source]
if not source:
    source_list = config.find('source', 'list', None)
    if not source_list:
        notify.fatal('Kann Quellpfad nicht bestimmen (sollte in source::path stehen)')
        clog.critical('source::path or source::list should be present')
        sys.exit(127)
    try:
        sls = config.find_section(source_list)
    except KeyError as ke:
        notify.fatal(f'Kann Quellenliste nicht finden ({source_list}::*)')
        raise SystemExit(127) from ke
    sources = []
    for path in sls.values():
        clog.debug('Appending path %s', path)
        sources.append(path)
target = config.find('target', 'path', None)
if not target:
    notify.fatal('Kann Zielpfad nicht bestimmen (sollte in target::path stehen')
    sys.exit(127)
exclude_file = config.find('source', 'exclude_file', None)
if not exclude_file:
    notify.fatal("Kann nicht bestimmen, welche Dateien vom Backup "
            + "ausgeschlossen werden sollen (sollte in source::exclude_file stehen)")
clog.info("Sources %s", '; '.join(sources))
clog.info("Target %s", target)
clog.info("Exclude file %s", exclude_file)

rsync_oneletters = '-via'
if config.find('rsync', 'no_cross', '') == '-x':
    rsync_oneletters = '-viax'

providers = config.find('rsync', 'providers', '').split()
with ExitStack() as es:
    for prv in providers:
        try:
            es.enter_context(ProviderFactory(prv, config))
        except ProvideError as pe:
            raise SystemExit(1) from pe
    copy_args = ['rsync',
            '--partial',
            rsync_oneletters,
            f'--exclude-from={exclude_file}',
            *sources,
            target
        ]
    if config.find('rsync', 'privilege', '') == 'sudo':
        copy_args.insert(0, 'sudo')
    cpresult = subprocess.run(copy_args, text=True, capture_output=True, check=False)
    err_len = cpresult.stderr.strip().count('\n')
    error = oneline(cpresult.stderr)
    out_len = cpresult.stdout.strip().count('\n')
    clog.info("RSYNC done, exit code %d, %d log lines, %d error lines",
            cpresult.returncode, out_len, err_len)
    outfile = datetime.datetime.now().strftime(config.find('rsync', 'outfile', ''))
    outstr = f"{out_len} output lines"
    code = f"{cpresult.returncode}\n{error}"
    if outfile:
        with Path(outfile).open("w+") as out:
            out.write(cpresult.stdout)
        outstr = f"output in {outfile}"
    if cpresult.returncode == 0:
        notify.success(f"{outstr}\n{error}")
    elif cpresult.returncode in (23, 24):
        notify.success(f"Nicht alle Quelldateien konnten gelesen werden {cpresult.returncode}\n{outstr}\n{error}")
    elif cpresult.returncode == 20:
        notify.abort(f"Kopiervorgang abgebrochen {out_len}/{err_len} Zeilen\n{error}")
    elif cpresult.returncode in (1, 2, 4, 6):
        notify.fatal(f"rsync falsch benutzt {code}")
    elif cpresult.returncode in (3, 5, 10, 11, 12, 13, 14, 21, 22):
        notify.fail(f"rsync copy error {code}")
    elif cpresult.returncode in (25, 35, 40):
        notify.fail(f"rsync other error {code}")
    else:
        notify.fail(f"Unknown rsync error {code}")
