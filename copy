#!/usr/bin/python3

"""Copy stuff"""

import argparse

from context import Context
from config import Config
import deadtime
import log
from notify import Notify
from rsync import RSync
from provider import ProviderFactory, ProvideError

clog = log.get_logger('copy')

def find_sources(config, notify):
    source = config.find('source', 'path', None)
    if source:
        return [source]
    source_list = config.find('source', 'list', None)
    if not source_list:
        notify.fatal('Kann Quellpfad nicht bestimmen (sollte in source::path oder source::list stehen)')
        clog.critical('source::path or source::list should be present')
        raise SystemExit(127)
    try:
        sls = config.find_section(source_list)
    except KeyError as ke:
        notify.fatal(f'Kann Quellenliste nicht finden ({source_list}::*)')
        clog.critical('[%s] should be present in configuration', source_list)
        raise SystemExit(127) from ke
    return [path for path in sls.values()]

parser = argparse.ArgumentParser(
    description="""Creates Backups and notifies about the success of failure thereof."""
)
parser.add_argument('--force', '-f', default=False, action='store_true', required=False)
Config.add_options(parser)
log.add_options(parser)
Notify.add_options(parser)
args = parser.parse_args()

clog = log.get_logger('copy', args)
config = Config.get_config(args)
notify = Notify(config, show=args.notification_show)

if not deadtime.test_deadtime(args.force, config, notify):
    raise SystemExit(0)
notify.start("Starte Backup")
sources = find_sources(config, notify)
target = config.find('target', 'path', None)
if not target:
    notify.fatal('Kann Zielpfad nicht bestimmen (sollte in target::path stehen')
    raise SystemExit(127)
exclude_file = config.find('source', 'exclude_file', None)
clog.info("Sources %s", '; '.join(sources))
clog.info("Target %s", target)
clog.info("Exclude file %s", exclude_file)

rsync = RSync(config)
rsync.fill_options()
rsync.sudo()

providers = config.find('rsync', 'providers', '').split()
with Context(config, providers):
    rsync.run(sources=sources, target=target)

clog.info("RSYNC done, exit code %d, %d log lines, %d error lines",
          rsync.returncode, rsync.out_len, rsync.err_len)
rsync.save_output()
rsync.notify_result(notify)
rsync.report_output()
