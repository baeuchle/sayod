# This is an example backup config file which shows all possible
# configurations in version 2.0

# The section 'defaults' is special:
[defaults]
# For each value, config.py tries to read the contents of that file into
# the current configuration object. Afterwards, this file is read again,
# so that the values from this file override the values from all files
# loaded via this section.
totally_arbitrary_key = file_to_be_read.ini
another_totally_arbitrary_key = another_file.ini
# The order in which files are read is undefined and not guaranteed to
# be the same between different python interpreters or different runs.
# If two files specify the same directive and it is not overridden in
# this file, the result is undefined.

# all directives that have to do with notifying the remote part of
# successes or failures:
[notify]
# which host to ssh to
host = localhost
# remote user on host: defaults to $LOGNAME
user = $LOGNAME
# SSH port to connect to: defaults to 22
port = 22
# configuration file name on host; defaults to $stripped_rc (i.e., name
# of this file sans extension)
remotekey = example
# Should we pipe the log message into ssh? If empty or not given, we
# simply echo it.
pipe = ssh
# default timeout to use for each notification. If unset, each task has
# their own default; see also section [timeout]
timeout = 10000

# This section contains timeouts for on-screen notifications in milliseconds.
# For each of these: if it is not set, then notify:timeout is used, and
# if that is not set, the respective default values are taken.
[timeout]
# timeout for ABORT nofications.
abort = 10000
# ... should be obvious
deadtime = 2000
fail = 60000
fatal = 360000
start = 4000
success = 4000
# timeout for all other notifications.
else = 5000

[info]
friendly_name = Example Backup Config

# This section pertains to copy and control rsync's behaviour:
[rsync]
# Number of days after last success before we try again:
deadtime = 0
# If "sudo" then we run rsync as sudo
privilege =
# If "-x", then we add -x (do not cross file system boundaries) to
# rsync's options
no_cross =
# Rsync output file name. Must be a string that can be passed to date's
# "+". If empty, we take a temporary file.
outfile =

# This section pertains to copy and controls the copy source
[source]
path =
exclude_file =
provide =
provide_unless = false
release =

[target]
path =
provide =
provide_unless =
release =

[database]
type = sqlite3
directory = $PWD
source =
password =
user = $LOGNAME

[git]
directory = $PWD or ${database:directory}
commit = No
tagname = stable
grand_message = /depends/. Grand Backup
grand_date =
origins = origin
add =
add_all =
small_message = small backup

#### ANALYSE ####
[status]
file =
warn_missing = 9

[messages]
# python format: days=warn_missing_success, last_success=last_success
warn_missing = Last successful backup was before {last_success.dat:%Y.%m.%d %H:%M}.
# python format:
# last_start=last_start,
# diff=(now - last_start.date)
report_last_started = Last backup was at {last_start.date:%Y.%m.%d %H:$M}
no_further_tries = No more tries are recorded
opening = Hallo
# python format:
#   count=totcount
analyse_headline = Analysis has found {count} message(s)
closing = Bye
# python format:
#   version=gitversion.describe()
version = Created by version {version}

[mail]
sign = No
type = echo
email = backup-user@localhost
sender = backup-user@localhost
subject = Backup Script

[category_headlines]
ERR =
WARN =
NOTIFY =
